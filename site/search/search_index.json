{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Bem vindo a documenta\u00e7\u00e3o do Projeto de DataQuality aovivo.</p>"},{"location":"#layout-da-documentacao","title":"Layout da Documenta\u00e7\u00e3o","text":"<ul> <li>FrontEnd</li> <li>BackEnd</li> <li>Tests</li> </ul>"},{"location":"p2-frontend/","title":"FrontEnd","text":"<p>P\u00e1gina de documenta\u00e7\u00e3o do FrontEnd.</p> <p>Nesta p\u00e1gina estamos documentando como foi realizado o FrontEnd da nossa p\u00e1gina.</p> <p>Fun\u00e7\u00e3o principal que chama a interface visual para valida\u00e7\u00e3o do arquivo csv de acordo com o contrato de dados.</p> Source code in <code>app.py</code> <pre><code>def main():\n    \"\"\"Fun\u00e7\u00e3o principal que chama a interface visual para valida\u00e7\u00e3o do arquivo csv de acordo com o contrato de dados.\"\"\"\n    st.set_page_config(\n        page_title=\"Valida\u00e7\u00e3o de CSV\", page_icon=\":bar_chart:\", layout=\"wide\"\n    )\n\n    st.title(\"Valida\u00e7\u00e3o de CSV - DataQuality\")\n\n    csv = st.file_uploader(\"Selecione o arquivo CSV\", type=[\"csv\"])\n\n    botao = st.button(\"Validar\")\n\n    if botao:\n        validar(csv)\n</code></pre>"},{"location":"p3-backend/","title":"BackEnd","text":"<p>P\u00e1gina de documenta\u00e7\u00e3o sobre as fun\u00e7\u00e3o de BackEnd</p>"},{"location":"p3-backend/#contrato-de-dados","title":"Contrato de Dados","text":"<p>             Bases: <code>BaseModel</code></p> <p>Classe de Contrato de Dados, recebendo o BaseModel do Pydantic.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>Identificador do funcion\u00e1rio.</p> required <code>nome</code> <code>str</code> <p>Nome do funcion\u00e1rio.</p> required <code>datenascimento</code> <code>datetime</code> <p>Data de nascimento do funcion\u00e1rio.</p> required <code>email</code> <code>str</code> <p>E-mail do funcion\u00e1rio.</p> required <code>cargo</code> <code>EmailStr</code> <p>Cargo do funcion\u00e1rio.</p> required <code>departamento</code> <code>str</code> <p>Departamento do funcion\u00e1rio.</p> required Source code in <code>schema.py</code> <pre><code>class ContratoFuncionarios(BaseModel):\n    \"\"\"\n    Classe de Contrato de Dados, recebendo o BaseModel do Pydantic.\n\n    Args:\n        id (int): Identificador do funcion\u00e1rio.\n        nome (str): Nome do funcion\u00e1rio.\n        datenascimento (datetime): Data de nascimento do funcion\u00e1rio.\n        email (str): E-mail do funcion\u00e1rio.\n        cargo (EmailStr): Cargo do funcion\u00e1rio.\n        departamento (str): Departamento do funcion\u00e1rio.\n    \"\"\"\n\n    id: PositiveInt\n    nome: str\n    idade: PositiveInt\n    datanascimento: datetime\n    email: EmailStr\n    cargo: str\n    departamento: str\n</code></pre>"},{"location":"p4-test/","title":"Tests","text":"<p>P\u00e1gina de Documenta\u00e7\u00e3o de Testes.</p>"},{"location":"p4-test/#teste-de-aplicacao","title":"Teste de Aplica\u00e7\u00e3o","text":"<p>Arquivo de Testes da Interface Visual.</p>"},{"location":"p4-test/#test.test_app.driver","title":"<code>driver()</code>","text":"<p>Fixture para iniciar o webdriver.</p> Source code in <code>test\\test_app.py</code> <pre><code>@pytest.fixture\ndef driver():\n    \"\"\"Fixture para iniciar o webdriver.\"\"\"\n    process = subprocess.Popen([\"streamlit\", \"run\", \"app.py\"])\n\n    driver = webdriver.Firefox()\n    driver.set_page_load_timeout(10)\n    yield driver\n\n    driver.quit()\n    process.kill()\n</code></pre>"},{"location":"p4-test/#test.test_app.test_app_open","title":"<code>test_app_open(driver)</code>","text":"<p>Testa se a aplica\u00e7\u00e3o est\u00e1 abrindo.</p> Source code in <code>test\\test_app.py</code> <pre><code>def  test_app_open(driver):\n    \"\"\"Testa se a aplica\u00e7\u00e3o est\u00e1 abrindo.\"\"\"\n    driver.get(\"http://127.0.0.1:8501\")\n    sleep(3)\n</code></pre>"},{"location":"p4-test/#test.test_app.test_app_title","title":"<code>test_app_title(driver)</code>","text":"<p>Testa se o ti\u00edtulo da aplica\u00e7\u00e3o est\u00e1 correto.</p> Source code in <code>test\\test_app.py</code> <pre><code>def test_app_title(driver):\n    \"\"\"Testa se o ti\u00edtulo da aplica\u00e7\u00e3o est\u00e1 correto.\"\"\"\n    driver.get(\"http://127.0.0.1:8501\")\n    sleep(3)\n    assert driver.title == \"Valida\u00e7\u00e3o de CSV\"\n</code></pre>"},{"location":"p4-test/#teste-contrato-de-dados","title":"Teste Contrato de Dados","text":"<p>Arquivo de Testes do Schema.</p>"},{"location":"p4-test/#test.test_schema.test_dados_invalido","title":"<code>test_dados_invalido()</code>","text":"<p>Fun\u00e7\u00e3o de teste com dados invalidos.</p> Source code in <code>test\\test_schema.py</code> <pre><code>def test_dados_invalido():\n    \"\"\"Fun\u00e7\u00e3o de teste com dados invalidos.\"\"\"\n    dados_invalidos = {\n        \"id\": -1,\n        \"nome\": \"teste\",\n        \"idade\": 1,\n        \"datanascimento\": datetime.now(),\n        \"email\": \"teste\",\n        \"cargo\": \"teste\",\n        \"departamento\": \"teste\"\n    }\n    with pytest.raises(ValidationError):\n        ContratoFuncionarios(**dados_invalidos)\n</code></pre>"},{"location":"p4-test/#test.test_schema.test_dados_validos","title":"<code>test_dados_validos()</code>","text":"<p>Fun\u00e7\u00e3o de teste com dados validos.</p> Source code in <code>test\\test_schema.py</code> <pre><code>def test_dados_validos():\n        \"\"\"Fun\u00e7\u00e3o de teste com dados validos.\"\"\"\n        dados_validos = {\n                \"id\": 1,\n                \"nome\": \"teste\",\n                \"idade\": 1,\n                \"datanascimento\": datetime.now(),\n                \"email\": \"teste@email.com\",\n                \"cargo\": \"teste\",\n                \"departamento\": \"teste\"\n        }\n        funcionarios = ContratoFuncionarios(**dados_validos)\n        assert funcionarios.id == dados_validos[\"id\"]\n        assert funcionarios.nome == dados_validos[\"nome\"]\n        assert funcionarios.idade == dados_validos[\"idade\"]\n        assert funcionarios.datanascimento == dados_validos[\"datanascimento\"]\n        assert funcionarios.email == dados_validos[\"email\"]\n        assert funcionarios.cargo == dados_validos[\"cargo\"]\n        assert funcionarios.departamento == dados_validos[\"departamento\"]\n</code></pre>"}]}